# This is an example resource file for rTorrent. Copy to
# ~/.rtorrent.rc and enable/modify the options as needed. Remember to
# uncomment the options you wish to enable.

# Maximum and minimum number of peers to connect to per torrent.
min_peers = 40
max_peers = 100

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 10
max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
max_uploads = 15

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0


# Default directory to save the downloaded torrents.
directory = ~/torrents/

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = ~/.session

# Watch a directory for new torrents, and stop those that have been
# deleted.
# Watch a directory for new torrents, and stop those that have been
# deleted.
#schedule = watch_directory,5,5,load_start=./watch/*.torrent
#schedule = watch_directory,5,5,load_start=/home/ogny/torrents/watch/*.torrent
#schedule = untied_directory,5,5,stop_untied=
#schedule = tied_directory,5,5,start_tied=

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=100M

# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
# example: stop at ratio 2.0 with at least 200 MB uploaded, or else ratio 20.0
#schedule = ratio,60,60, stop_on_ratio=200,200M,2000
#ratio.max.set=2000 ratio.upload.set=200M
#system.method.set = group.seeding.ratio.command, d.close=
# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
port_range = 49164-49164

# Start opening ports at a random position within the port range.
port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = yes

# Set whetever the client should try to connect to UDP trackers.
#use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
# encryption = allow_incoming,enable_retry,prefer_plaintext

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
# 
 dht = auto

# UDP port to use for DHT. 
# 
# dht_port = 6881

# Enable peer exchange (for torrents not marked private)
#
 peer_exchange = yes

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
hash_max_tries = 10

# location where new torrent data is placed, and where you should place your 'complete' data before you place your *.torrent file into the watch folder
directory = /home/ogny/torrents/incomplete

# a timer event named 'watch_directory_1' that is triggered 10 seconds after rtorrent starts, and every 10 seconds thereafter.  Each time it is triggered, it will attempt to load (and start) new *.torrent files found in /home/ogny/torrents/watch/
# If a new *.torrent is loaded from this directory, a variable named 'custom1' is added with the value being "/home/ogny/torrents/complete"
# if you don't want it to automatically start the torrent, change 'load_start' to 'load'
schedule = watch_directory_1,10,10,"load_start=/home/ogny/torrents/watch/*.torrent,d.set_custom1=/home/ogny/torrents/complete/"
#schedule = watch_directory_1,10,10,"load_start=/home/ogny/torrents/watch/*.torrent,d.set_custom1=/home/ogny/torrents/complete/music"
# alias 'checkdirs' = ('current path of torrent data' != 'value of custom1')
# returns true if the values are not equal, false if they are equal
system.method.insert=checkdirs,simple,"not=\"$equal={d.get_custom1=,d.get_base_path=}\""

# alias 'movecheck'  = ('result of checkdirs' && 'torrent is 100% done', 'custom1 variable is set')
# returns true if all 3 commands return true
system.method.insert=movecheck,simple,"and={checkdirs=,d.get_complete=,d.get_custom1=}"

# alias 'movedir'  = (series of commands): "set path of torrent to equal the value of custom1"; "mv -u <current data path> <custom1 path>"; "clear custom1", "stop the torrent","resume the torrent"
# The last 2 commands are used to get the torrent to reset the 'base path' to custom1
system.method.insert=movedir,simple,"d.set_directory=$d.get_custom1=;execute=mv,-u,$d.get_base_path=,$d.get_custom1=;d.set_custom1=;d.stop=;d.start="

# a key with a name of 'move_hashed' that is attached to the hash_done event.
# When hashing of a torrent completes, a custom key called 'move_hashed' will be called that checks if the movecheck command is true and if so runs the movedir command
# 'branch' is like an 'if' statement
# if(movecheck){movedir}
system.method.set_key=event.download.hash_done,move_hashed,"branch={$movecheck=,movedir=}"
scgi_port = localhost:5000
